
DROP TABLE reviews;
DROP TABLE songs;
DROP TABLE album_artists;
DROP TABLE albums;
DROP TABLE artists;
DROP TABLE users;

CREATE TABLE users (
  username VARCHAR(50),
  user_id VARCHAR(128),
  pass BLOB,
  email VARCHAR(50),
  phone VARCHAR(10),
  CONSTRAINT pk_user_id PRIMARY KEY (user_id)
);

CREATE TABLE artists (
  artist_name VARCHAR(100),
  artist_id VARCHAR(128),
  bio VARCHAR(256),
  CONSTRAINT pk_artist_id PRIMARY KEY (artist_id)
);

CREATE TABLE albums (
  album_title VARCHAR(100),
  date_released DATE,
  album_id VARCHAR(128),
  artist_id VARCHAR(128),
  avg_rating DOUBLE(2,1),
  CONSTRAINT pk_album_id PRIMARY KEY (album_id),
  FOREIGN KEY (artist_id) REFERENCES artists(artist_id)
);

CREATE TABLE album_artists (
  artist_id VARCHAR(128),
  album_id VARCHAR(128),
  FOREIGN KEY (artist_id) REFERENCES artists(artist_id),
  FOREIGN KEY (album_id) REFERENCES albums(album_id),
  CONSTRAINT pk_artist_album_id PRIMARY KEY (artist_id, album_id)
);

CREATE TABLE songs (
  song_title VARCHAR(100),
  duration DOUBLE(5,2),
  artist_id VARCHAR(128),
  date_released DATE,
  album_id VARCHAR(128),
  song_id VARCHAR(128),
  avg_rating DOUBLE(2,1),
  CONSTRAINT pk_song_id PRIMARY KEY (song_id),
  FOREIGN KEY (artist_id) REFERENCES albums(artist_id),
  FOREIGN KEY (album_id) REFERENCES albums(album_id)
);

CREATE TABLE reviews (
  song_id VARCHAR(128),
  song_rating INTEGER(1),
  song_review VARCHAR(128),
  album_id VARCHAR(128),
  album_rating INTEGER(1),
  album_review VARCHAR(128),
  date_of_review DATE,
  user_id VARCHAR(128),
  FOREIGN KEY (song_id) REFERENCES songs(song_id),
  FOREIGN KEY (album_id) REFERENCES albums(album_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- -- This is fake data generated by GPT-4
-- INSERT INTO users (username, user_id, pass, email, phone)
-- VALUES
--   ('alice', 1, 'hashed_password1', 'alice@example.com', 1234567890),
--   ('bob', 2, 'hashed_password2', 'bob@example.com', 9876543210),
--   ('zara', 3, 'hashed_password50', 'zara@example.com', 555-123-4567);

-- INSERT INTO artists (artist_name, artist_id, bio)
-- VALUES
--   ('Adele', 1, 'British singer-songwriter'),
--   ('Bruno Mars', 2, 'American singer, songwriter, and record producer'),
--   ('Zayn Malik', 3, 'English singer and songwriter'),
--   ('Josh LaRue', 4, 'Very cool person'),
--   ('Caroline Polachek', 5, 'Trained in opera and makes sick music');

-- INSERT INTO albums (album_title, album_id, date_released, artist_id, avg_rating)
-- VALUES
--   ('25', 1, '2015-11-20', 1, 2.4),
--   ('Unorthodox Jukebox', 2, '2012-12-07', 2, 5),
--   ('Pang', 3, '2023-12-29', 3, 2.2),
--   ('Life In Britain', 4, '2011-10-2', 4, 4.1),
--   ('A Plethora of Goldfish', 5, '2024-4-15', 5, 4.9);

-- INSERT INTO album_artists (artist_id, album_id)
-- VALUES
--   (1, 1),
--   (2, 2),
--   (3, 3),
--   (4, 4),
--   (5, 5);

-- INSERT INTO songs (song_title, duration, artist_id, date_released, album_id, song_id, avg_rating)
-- VALUES
--   ('Hello', 128, 1, '2015-11-20', 1, 1, 1.2),
--   ('Locked Out of Heaven', 380, 2, '2012-12-07', 2, 2, 3.4),
--   ('Pop Song', 240, 3, '2012-12-07', 3, 3, 4.5),
--   ('Rock Ballad', 300, 4, '2012-12-07', 4, 4, 4.2),
--   ('Snakes and Stones', 300, 5, '2012-12-07', 5, 5, 2.9);

-- INSERT INTO reviews (song_id, song_rating, song_review, album_id, album_rating, album_review, date_of_review, user_id)
-- VALUES
--   (1, 5, 'Amazing vocals!', 1, 4, 'Solid album overall', '2024-03-06', 1),
--   (2, 4, 'Catchy tune!', 2, 4, 'Great mix of styles', '2024-03-06', 2);